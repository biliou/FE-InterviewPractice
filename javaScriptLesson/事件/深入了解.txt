1.JavaScript 与 HTML之间的交互式通过事件实现的。事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。

2.事件流
事件流描述的是从页面中接收事件的顺序。

3.事件冒泡
事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点。（沿着DOM树向上传播，在每一级都会发生，
直至传播到document对象）

4.事件处理程序
响应某个事件的函数就叫做事件处理程序（事件监听器）。以"on"开头，因此click事件的时间处理程序就是onclick。


5.事件对象event
触发DOM上的某个事件时，会产生一个事件对象event。会将一个event对象传入到时间处理程序中。
常用属性
currentTarget
target  //真正的目标
preventDefault()  //阻止特定事件的默认行为
type
stopPropagation() //阻止事件冒泡

6.事件类型
UI事件
焦点事件
滚轮事件
文本事件
键盘事件
合成事件
变动事件

7.事件代理（事件委托）
事件代理就是说我们将事件添加到本来要添加事件的父节点，将事件委托给父节点来触发处理函数，这通常会使用在大量
的同级元素需要添加同一类事件的时候，比如一个动态的非常多的列表，需要为每个列表项都添加 点击事件，这时可以使
用事件代理，通过判断e.target.nodeName来判断发生的具体元素，从而判断是否是在 列表项中触发，这样的好处是可以
减少事件绑定，同时动态的DOM结构仍然可以监听。事件代理发生在冒泡阶段。

优点：减少函数对象，占用内存减少，性能提升。

8.浏览器的冒泡阶段
DOM2.0模型将事件处理流程分为三个阶段：一、事件捕获阶段，二、事件目标阶段，三、事件起泡阶段

9.事件循环机制
首先需要知道有调用栈，任务列表两个执行容器
所有代码都是通过调用栈执行，然后如果是WebAPIs（即DOM操作，ajax请求，setTimeout等）就会交给不同的任务队列处理，
等到调用栈中的task执行完之后，再回去执行任务队列中的task

参考：
https://zhuanlan.zhihu.com/p/26229293
